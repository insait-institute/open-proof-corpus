{
    "metadata": {
        "category": [],
        "competition": "usamo",
        "difficulty": 7.44,
        "level": "high_school",
        "source": "USAMO",
        "url": "https://web.evanchen.cc/problems.html",
        "year": 2022
    },
    "problem": "There are \\(2022\\) users on a social network called Mathbook, and some of them are Mathbook-friends. (On Mathbook, friendship is always mutual and permanent.) Starting now, Mathbook will only allow a new friendship to be formed between two users if they have at least two friends in common. What is the minimum number of friendships that must already exist so that every user could eventually become friends with every other user?",
    "problem_id": "USAMO_2022_6",
    "solutions": [
        {
            "author": "Human",
            "solution": "## Problem statement\n\nThere are $2022$ users on a social network called Mathbook, and some of them are Mathbook-friends. (On Mathbook, friendship is always mutual and permanent.)\n\nStarting now, Mathbook will only allow a new friendship to be formed between two users if they have at least two friends in common. What is the minimum number of friendships that must already exist so that every user could eventually become friends with every other user?\n\nWith $2022$ replaced by $n$, the answer is $\\left\\lceil\\frac{3}{2} n\\right\\rceil-2$.\n\u0433\u0402\u0452 Terminology. Standard graph theory terms: starting from a graph $G$ on $n$ vertices, we're allowed to take any $C_{4}$ in the graph and complete it to a $K_{4}$. The problem asks the minimum number of edges needed so that this operation lets us transform $G$ to $K_{n}$.\n\n\u0433\u0402\u0452I Construction. For even $n$, start with an edge $a b$, and then create $n / 2-1$ copies of $C_{4}$ that use $a b$ as an edge, as shown below for $n=14$ (six copies of $C_{4}$ ).\n\nThis can be completed into $K_{n}$ by first completing the $n / 2-1 C_{4}$ 's into $K_{4}$, then connecting red vertices to every grey vertex, and then finishing up.\n\nThe construction for odd $n$ is the same except with one extra vertex $c$ which is connected to both $a$ and $b$.\n\n\u0433\u0402\u0452 Bound. Notice that additional operations or connections can never hurt. So we will describe a specific algorithm that performs operations on the graph until no more operations are possible. This means that if this algorithm terminates with anything other $G=K_{n}$, the graph was never completable to $K_{n}$ to begin with.\nThe algorithm uses the following data: it keeps a list $\\mathcal{C}$ of cliques of $G$, and a labeling $\\mathcal{L}: E(G) \\rightarrow \\mathcal{C}$ which assigns to every edge one of the cliques that contains it.\n\n- Initially, $\\mathcal{C}$ consists of one $K_{2}$ for every edge of $G$, and each edge is labeled in the obvious way.\n- At each step, the algorithm arbitrarily takes any $C_{4}=a b c d$ whose four edges $a b$, $b c, c d, d a$ do not all have the same label. Consider these labels that appear (at least two, and up to four), and let $V$ be the union of all vertices in any of these 2-4 cliques.\n- Do the following graph operations: connect $a c$ and $b d$, then connect every vertex in $V-\\{a, b, c, d\\}$ to each of $\\{a, b, c, d\\}$. Finally, complete this to a clique on $V$.\n- Update $\\mathcal{C}$ by merging these 2-4 cliques into a single clique $K_{V}$.\n- Update $\\mathcal{L}$ by replacing every edge that was labeled with one of these 2-4 cliques with the label $K_{V}$. Also, update every newly created edge to have label $K_{V}$. However, if there were existing edges not labeled with one of the 2-4 cliques, then we do not update these!\n- Stop once every $C_{4}$ has only one label appearing among its edges. When this occurs, no operations are possible at all on the graph.\n\nA few steps of the process are illustrated below for a graph on six vertices with nine initial edges. There are initially nine $K_{2}$ 's labeled A, B, ..., I. Original edges are always bolder than added edges. The relabeled edges in each step are highlighted in color. Notice how we need an entirely separate operation to get G to become L, even though no new edges are drawn in the graph.\n\nStep 2: Operate on $1235$.\nMerges CIJ into K. $\\theta(\\mathrm{K})=6$\n\nStep 3: Operate on $2356$\nMerges GK into L.\n$\\theta(\\mathrm{L})=7$\n\nAs we remarked, if the graph is going to be completable to $K_{n}$ at all, then this algorithm must terminate with $\\mathcal{C}=\\left\\{K_{n}\\right\\}$. We will use this to prove our bound.\n\nWe proceed by induction in the following way. For a clique $K$, let $\\theta(K)$ denote the number of edges of the original graph $G$ which are labeled by $K$ (this does not include new edges added by the algorithm); hence the problem amounts to estimating how small $\\theta\\left(K_{n}\\right)$ can be. We are trying to prove:\n\nClaim - At any point in the operation, if $K$ is a clique in the cover $\\mathcal{C}$, then\n\n$$\n\\theta(K) \\geq \\frac{3|K|}{2}-2 .\n$$\nwhere $|K|$ is the number of vertices in $K$.\nProof. By induction on the time step of the algorithm. The base case is clear, because then $K$ is just a single edge of $G$, so $\\theta(K)=1$ and $|K|=2$.\n\nThe inductive step is annoying casework based on the how the merge occurred. Let $C_{4}=a b c d$ be the $4$-cycle operated on. In general, the $\\theta$ value of a newly created $K$ is exactly the sum of the $\\theta$ values of the merged cliques, by definition. Meanwhile, $|K|$ is the number of vertices in the union of the merged cliques; so it's the sum of the sizes of these cliques minus some error due to overcounting of vertices appearing more than once. To be explicit:\n\n- Suppose we merged four cliques $W, X, Y, Z$. By definition,\n\n$$\n\\begin{aligned}\n\\theta(K) & =\\theta(W)+\\theta(X)+\\theta(Y)+\\theta(Z) \\\\\n& \\geq \\frac{3}{2}(|W|+|X|+|Y|+|Z|)-8=\\frac{3}{2}(|W|+|X|+|Y|+|Z|-4)-2 .\n\\end{aligned}\n$$\n\nOn the other hand $|K| \\leq|W|+|X|+|Y|+|Z|-4$; the $-4$ term comes from each of $\\{a, b, c, d\\}$ being in two (or more) of $\\{W, X, Y, Z\\}$. So this case is OK.\n\n- Suppose we merged three cliques $X, Y, Z$. By definition,\n\n$$\n\\begin{aligned}\n\\theta(K) & =\\theta(X)+\\theta(Y)+\\theta(Z) \\\\\n& \\geq \\frac{3}{2}(|X|+|Y|+|Z|)-6=\\frac{3}{2}\\left(|X|+|Y|+|Z|-\\frac{8}{3}\\right)-2 .\n\\end{aligned}\n$$\n\nOn the other hand, $|K| \\leq|X|+|Y|+|Z|-3$, since at least $3$ of $\\{a, b, c, d\\}$ are repeated among $X, Y, Z$. Note in this case the desired inequality is actually strict.\n\n- Suppose we merged two cliques $Y, Z$. By definition,\n\n$$\n\\begin{aligned}\n\\theta(K) & =\\theta(Y)+\\theta(Z) \\\\\n& \\geq \\frac{3}{2}(|Y|+|Z|)-4=\\frac{3}{2}\\left(|Y|+|Z|-\\frac{4}{3}\\right)-2 .\n\\end{aligned}\n$$\n\nOn the other hand, $|K| \\leq|Y|+|Z|-2$, since at least $2$ of $\\{a, b, c, d\\}$ are repeated among $Y, Z$. Note in this case the desired inequality is actually strict.\n\nRemark. Several subtle variations of this method do not seem to work.\n\n- It does not seem possible to require the cliques in $\\mathcal{C}$ to be disjoint, which is why it's necessary to introduce a label function $\\mathcal{L}$ as well.\n- It seems you do have to label the newly created edges, even though they do not count towards any $\\theta$ value. Otherwise the termination of the algorithm doesn't tell you enough.\n- Despite this, relabeling existing edges, like G in step $1$ of the example, $1$ seems to cause a lot of issues. The induction becomes convoluted if $\\theta(K)$ is not exactly the sum of $\\theta$-values of the subparts, while the disappearance of an edge from a clique will\n- also break induction.",
            "images": {}
        }
    ],
    "grading_scheme": [
        {
            "part_id": 1,
            "title": "Correctness",
            "description": "<p>A solution should be considered correct even if it would earn 5+/7 points in a full grading. Examples of small penalties worth 1 point are if the solution: <ul><li>Makes a small computational mistake that can be easily fixed</li><li>Misses an edge case which can be easily proven/disproven</li><li>Skips over a step that follows without much reasoning or manual work</li></ul> A solution should be marked as incorrect if: <ul><li>It marks a step as trivial, if it is not immediately obvious why this would be the case</li><li>It omits algebra-heavy computational steps, regardless of whether or not it has outlined the methodology</li><li>Generalizes over a pattern without rigorously describing the pattern, or without proving any relevant properties.</li><li>It cites a non-existing or unpopular source/Theorem, which cannot be immediately found from searching for it online. Thus, any theorems that can be immediately found and have a Wikipedia article are allowed.</li></ul> The model has been specifically told that it should not skip steps or mark them as trivial. Any violation of this rule should be considered by assuming the model does not know how to derive the &quot;trivial&quot; step</p>",
            "points": 1
        }
    ],
    "points": 1
}